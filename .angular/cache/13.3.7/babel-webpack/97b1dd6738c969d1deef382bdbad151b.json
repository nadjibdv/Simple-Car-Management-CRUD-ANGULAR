{"ast":null,"code":"import _asyncToGenerator from \"H:\\\\code\\\\RECORDP\\\\ANGULAR\\\\Project CarWebApi\\\\CarProject1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpEventType, HttpRequest } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class ServicecarService {\n  constructor(httpP, router) {\n    this.httpP = httpP;\n    this.router = router;\n    this.url = \"https://localhost:44377/api/\";\n    this.working = false;\n    this.uploadFileLabel = 'Choose an image to upload';\n  }\n\n  getAllCars() {\n    this.httpP.get(\"https://localhost:44377/api/car\").toPromise().then(res => {\n      this.carsall = res;\n      console.log(\"---------- CAR -----------\");\n      console.log(res);\n    });\n  }\n\n  getUrlImage(filename) {\n    return this.url.replace(\"api/\", \"\") + \"images/\" + filename;\n  }\n\n  getCar(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this.httpP.get(_this.url + \"car/\" + id).toPromise().then(res => {\n        return res[0];\n      });\n    })();\n  }\n\n  addCar(newCar) {\n    const headers = {\n      'content-type': 'application/json'\n    };\n    const body = JSON.stringify(newCar);\n    this.router.navigate(['car']);\n    console.log(\" ================== OK =============\");\n    console.log(body);\n    this.httpP.post(this.url + \"car\", body, {\n      'headers': headers\n    }).subscribe(r => {\n      this.router.navigate(['car']);\n    });\n  }\n\n  editCar(id, updatePerson) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = {\n        'content-type': 'application/json'\n      };\n      const body = JSON.stringify(updatePerson);\n      yield _this2.httpP.put(_this2.url + \"car/\" + id, body, {\n        'headers': headers\n      }).toPromise();\n    })();\n  }\n\n  deleteCar(id) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.httpP.delete(_this3.url + \"car/\" + id).toPromise();\n\n      _this3.router.navigate(['car']);\n    })();\n  }\n\n  getPersonA() {\n    return this.httpP.get(this.url + \"person\").subscribe(res => {\n      this.personA = res;\n    });\n  } // ==> handleFileInput\n\n\n  handleFileInput(files) {\n    var _a;\n\n    if (files.length > 0) {\n      this.uploadFile = files.item(0);\n      this.uploadFileLabel = (_a = this.uploadFile) === null || _a === void 0 ? void 0 : _a.name;\n    }\n  }\n\n  upload(id) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this4.uploadFile) {\n        alert('Choose a file to upload first');\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(_this4.uploadFile.name, _this4.uploadFile);\n      formData.append('car_id', id);\n      const url = _this4.url + \"car/UplodFile\";\n      const uploadReq = new HttpRequest('POST', url, formData, {\n        reportProgress: true\n      });\n      _this4.uploadUrl = '';\n      _this4.uploadProgress = 0;\n      _this4.working = true;\n      yield _this4.httpP.request(uploadReq).subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress) {\n          _this4.uploadProgress = Math.round(100 * event.loaded / event.total);\n        } else if (event.type === HttpEventType.Response) {\n          _this4.uploadUrl = event.body.url;\n        }\n      }, error => {\n        console.error(error);\n      }).add(() => {\n        _this4.working = false;\n      });\n    })();\n  }\n\n}\n\nServicecarService.ɵfac = function ServicecarService_Factory(t) {\n  return new (t || ServicecarService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nServicecarService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServicecarService,\n  factory: ServicecarService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["H:/code/RECORDP/ANGULAR/Project CarWebApi/CarProject1/src/app/models/servicecar.service.ts"],"names":["HttpEventType","HttpRequest","i0","i1","i2","ServicecarService","constructor","httpP","router","url","working","uploadFileLabel","getAllCars","get","toPromise","then","res","carsall","console","log","getUrlImage","filename","replace","getCar","id","addCar","newCar","headers","body","JSON","stringify","navigate","post","subscribe","r","editCar","updatePerson","put","deleteCar","delete","getPersonA","personA","handleFileInput","files","_a","length","uploadFile","item","name","upload","alert","formData","FormData","append","uploadReq","reportProgress","uploadUrl","uploadProgress","request","event","type","UploadProgress","Math","round","loaded","total","Response","error","add","ɵfac","ServicecarService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpEventType, HttpRequest } from '@angular/common/http';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"@angular/router\";\r\nexport class ServicecarService {\r\n    constructor(httpP, router) {\r\n        this.httpP = httpP;\r\n        this.router = router;\r\n        this.url = \"https://localhost:44377/api/\";\r\n        this.working = false;\r\n        this.uploadFileLabel = 'Choose an image to upload';\r\n    }\r\n    getAllCars() {\r\n        this.httpP.get(\"https://localhost:44377/api/car\").toPromise().then(res => {\r\n            this.carsall = res;\r\n            console.log(\"---------- CAR -----------\");\r\n            console.log(res);\r\n        });\r\n    }\r\n    getUrlImage(filename) {\r\n        return this.url.replace(\"api/\", \"\") + \"images/\" + filename;\r\n    }\r\n    async getCar(id) {\r\n        return await this.httpP.get(this.url + \"car/\" + id).toPromise().then(res => {\r\n            return res[0];\r\n        });\r\n    }\r\n    addCar(newCar) {\r\n        const headers = { 'content-type': 'application/json' };\r\n        const body = JSON.stringify(newCar);\r\n        this.router.navigate(['car']);\r\n        console.log(\" ================== OK =============\");\r\n        console.log(body);\r\n        this.httpP.post(this.url + \"car\", body, { 'headers': headers }).subscribe(r => {\r\n            this.router.navigate(['car']);\r\n        });\r\n    }\r\n    async editCar(id, updatePerson) {\r\n        const headers = { 'content-type': 'application/json' };\r\n        const body = JSON.stringify(updatePerson);\r\n        await this.httpP.put(this.url + \"car/\" + id, body, { 'headers': headers }).toPromise();\r\n    }\r\n    async deleteCar(id) {\r\n        await this.httpP.delete(this.url + \"car/\" + id).toPromise();\r\n        this.router.navigate(['car']);\r\n    }\r\n    getPersonA() {\r\n        return this.httpP.get(this.url + \"person\").subscribe(res => {\r\n            this.personA = res;\r\n        });\r\n    }\r\n    // ==> handleFileInput\r\n    handleFileInput(files) {\r\n        var _a;\r\n        if (files.length > 0) {\r\n            this.uploadFile = files.item(0);\r\n            this.uploadFileLabel = (_a = this.uploadFile) === null || _a === void 0 ? void 0 : _a.name;\r\n        }\r\n    }\r\n    async upload(id) {\r\n        if (!this.uploadFile) {\r\n            alert('Choose a file to upload first');\r\n            return;\r\n        }\r\n        const formData = new FormData();\r\n        formData.append(this.uploadFile.name, this.uploadFile);\r\n        formData.append('car_id', id);\r\n        const url = this.url + \"car/UplodFile\";\r\n        const uploadReq = new HttpRequest('POST', url, formData, {\r\n            reportProgress: true,\r\n        });\r\n        this.uploadUrl = '';\r\n        this.uploadProgress = 0;\r\n        this.working = true;\r\n        await this.httpP.request(uploadReq).subscribe((event) => {\r\n            if (event.type === HttpEventType.UploadProgress) {\r\n                this.uploadProgress = Math.round((100 * event.loaded) / event.total);\r\n            }\r\n            else if (event.type === HttpEventType.Response) {\r\n                this.uploadUrl = event.body.url;\r\n            }\r\n        }, (error) => {\r\n            console.error(error);\r\n        }).add(() => {\r\n            this.working = false;\r\n        });\r\n    }\r\n}\r\nServicecarService.ɵfac = function ServicecarService_Factory(t) { return new (t || ServicecarService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\r\nServicecarService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ServicecarService, factory: ServicecarService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}