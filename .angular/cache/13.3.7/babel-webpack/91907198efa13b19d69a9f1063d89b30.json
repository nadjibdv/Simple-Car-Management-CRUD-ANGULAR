{"ast":null,"code":"import _asyncToGenerator from \"H:\\\\code\\\\RECORDP\\\\ANGULAR\\\\Project CarWebApi\\\\CarProject1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpEventType, HttpRequest } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class ServicecarService {\n  constructor(httpP, router) {\n    this.httpP = httpP;\n    this.router = router;\n    this.url = \"https://localhost:44377/api/\";\n    this.working = false;\n    this.uploadFileLabel = 'Choose an image to upload';\n  }\n\n  getAllCars() {\n    this.httpP.get(\"https://localhost:44377/api/car\").toPromise().then(res => {\n      this.carsall = res;\n      console.log(\"---------- CAR -----------\");\n      console.log(res);\n    });\n  }\n\n  getUrlImage(filename) {\n    return this.url.replace(\"api/\", \"\") + \"images/\" + filename;\n  }\n\n  getCar(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this.httpP.get(_this.url + \"car/\" + id).toPromise().then(res => {\n        return res[0];\n      });\n    })();\n  }\n\n  addCar(newCar) {\n    const headers = {\n      'content-type': 'application/json'\n    };\n    const body = JSON.stringify(newCar);\n    return this.httpP.post(this.url + \"car\", body, {\n      'headers': headers\n    }).toPromise().then(r => {});\n  }\n\n  editCar(id, updatePerson) {\n    const headers = {\n      'content-type': 'application/json'\n    };\n    const body = JSON.stringify(updatePerson);\n    return this.httpP.put(this.url + \"car/\" + id, body, {\n      'headers': headers\n    }).toPromise();\n  }\n\n  deleteCar(id) {\n    return this.httpP.delete(this.url + \"car/\" + id).toPromise();\n  }\n\n  getPersonA() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this2.httpP.get(_this2.url + \"person\").toPromise().then(res => {\n        _this2.personA = res;\n      });\n    })();\n  } // ==> handleFileInput\n\n\n  handleFileInput(files) {\n    var _a;\n\n    if (files.length > 0) {\n      this.uploadFile = files.item(0);\n      this.uploadFileLabel = (_a = this.uploadFile) === null || _a === void 0 ? void 0 : _a.name;\n    }\n  }\n\n  upload(id) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this3.uploadFile) {\n        alert('Choose a file to upload first');\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(_this3.uploadFile.name, _this3.uploadFile);\n      formData.append('car_id', id);\n      const url = _this3.url + \"car/UplodFile\";\n      const uploadReq = new HttpRequest('POST', url, formData, {\n        reportProgress: true\n      });\n      _this3.uploadUrl = '';\n      _this3.uploadProgress = 0;\n      _this3.working = true;\n      yield _this3.httpP.request(uploadReq).subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress) {\n          _this3.uploadProgress = Math.round(100 * event.loaded / event.total);\n        } else if (event.type === HttpEventType.Response) {\n          _this3.uploadUrl = event.body.url;\n        }\n      }, error => {\n        console.error(error);\n      }).add(() => {\n        _this3.working = false;\n      });\n    })();\n  }\n\n}\n\nServicecarService.ɵfac = function ServicecarService_Factory(t) {\n  return new (t || ServicecarService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nServicecarService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServicecarService,\n  factory: ServicecarService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["H:/code/RECORDP/ANGULAR/Project CarWebApi/CarProject1/src/app/models/servicecar.service.ts"],"names":["HttpEventType","HttpRequest","i0","i1","i2","ServicecarService","constructor","httpP","router","url","working","uploadFileLabel","getAllCars","get","toPromise","then","res","carsall","console","log","getUrlImage","filename","replace","getCar","id","addCar","newCar","headers","body","JSON","stringify","post","r","editCar","updatePerson","put","deleteCar","delete","getPersonA","personA","handleFileInput","files","_a","length","uploadFile","item","name","upload","alert","formData","FormData","append","uploadReq","reportProgress","uploadUrl","uploadProgress","request","subscribe","event","type","UploadProgress","Math","round","loaded","total","Response","error","add","ɵfac","ServicecarService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpEventType, HttpRequest } from '@angular/common/http';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"@angular/router\";\r\nexport class ServicecarService {\r\n    constructor(httpP, router) {\r\n        this.httpP = httpP;\r\n        this.router = router;\r\n        this.url = \"https://localhost:44377/api/\";\r\n        this.working = false;\r\n        this.uploadFileLabel = 'Choose an image to upload';\r\n    }\r\n    getAllCars() {\r\n        this.httpP.get(\"https://localhost:44377/api/car\").toPromise().then(res => {\r\n            this.carsall = res;\r\n            console.log(\"---------- CAR -----------\");\r\n            console.log(res);\r\n        });\r\n    }\r\n    getUrlImage(filename) {\r\n        return this.url.replace(\"api/\", \"\") + \"images/\" + filename;\r\n    }\r\n    async getCar(id) {\r\n        return await this.httpP.get(this.url + \"car/\" + id).toPromise().then(res => {\r\n            return res[0];\r\n        });\r\n    }\r\n    addCar(newCar) {\r\n        const headers = { 'content-type': 'application/json' };\r\n        const body = JSON.stringify(newCar);\r\n        return this.httpP.post(this.url + \"car\", body, { 'headers': headers }).toPromise().then(r => {\r\n        });\r\n    }\r\n    editCar(id, updatePerson) {\r\n        const headers = { 'content-type': 'application/json' };\r\n        const body = JSON.stringify(updatePerson);\r\n        return this.httpP.put(this.url + \"car/\" + id, body, { 'headers': headers }).toPromise();\r\n    }\r\n    deleteCar(id) {\r\n        return this.httpP.delete(this.url + \"car/\" + id).toPromise();\r\n    }\r\n    async getPersonA() {\r\n        return await this.httpP.get(this.url + \"person\").toPromise().then(res => {\r\n            this.personA = res;\r\n        });\r\n    }\r\n    // ==> handleFileInput\r\n    handleFileInput(files) {\r\n        var _a;\r\n        if (files.length > 0) {\r\n            this.uploadFile = files.item(0);\r\n            this.uploadFileLabel = (_a = this.uploadFile) === null || _a === void 0 ? void 0 : _a.name;\r\n        }\r\n    }\r\n    async upload(id) {\r\n        if (!this.uploadFile) {\r\n            alert('Choose a file to upload first');\r\n            return;\r\n        }\r\n        const formData = new FormData();\r\n        formData.append(this.uploadFile.name, this.uploadFile);\r\n        formData.append('car_id', id);\r\n        const url = this.url + \"car/UplodFile\";\r\n        const uploadReq = new HttpRequest('POST', url, formData, {\r\n            reportProgress: true,\r\n        });\r\n        this.uploadUrl = '';\r\n        this.uploadProgress = 0;\r\n        this.working = true;\r\n        await this.httpP.request(uploadReq).subscribe((event) => {\r\n            if (event.type === HttpEventType.UploadProgress) {\r\n                this.uploadProgress = Math.round((100 * event.loaded) / event.total);\r\n            }\r\n            else if (event.type === HttpEventType.Response) {\r\n                this.uploadUrl = event.body.url;\r\n            }\r\n        }, (error) => {\r\n            console.error(error);\r\n        }).add(() => {\r\n            this.working = false;\r\n        });\r\n    }\r\n}\r\nServicecarService.ɵfac = function ServicecarService_Factory(t) { return new (t || ServicecarService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\r\nServicecarService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ServicecarService, factory: ServicecarService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}