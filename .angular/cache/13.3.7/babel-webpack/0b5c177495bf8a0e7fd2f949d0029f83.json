{"ast":null,"code":"import _asyncToGenerator from \"H:\\\\code\\\\RECORDP\\\\ANGULAR\\\\Project CarWebApi\\\\CarProject1\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpEventType, HttpRequest } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class ServicecarService {\n  constructor(httpP, router) {\n    this.httpP = httpP;\n    this.router = router;\n    this.url = \"https://localhost:44377/api/\";\n    this.working = false;\n    this.uploadFileLabel = 'Choose an image to upload';\n  }\n\n  getAllCars() {\n    this.httpP.get(\"https://localhost:44377/api/car\").toPromise().then(res => {\n      this.carsall = res;\n      console.log(\"---------- CAR -----------\");\n      console.log(res);\n    });\n  }\n\n  getUrlImage(filename) {\n    return this.url.replace(\"api/\", \"\") + \"images/\" + filename;\n  }\n\n  getCar(id) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var aaa;\n      yield _this.httpP.get(_this.url + \"car/\" + id).subscribe(res => {\n        console.log(\" =================1\");\n        aaa = res;\n        console.log(\" =================1\");\n      });\n      yield console.log(\" =================2\");\n      yield console.log(aaa);\n      yield console.log(\" =================2\");\n      return aaa;\n    })();\n  }\n\n  addCar(newCar) {\n    const headers = {\n      'content-type': 'application/json'\n    };\n    const body = JSON.stringify(newCar);\n    this.router.navigate(['car']);\n    console.log(\" ================== OK =============\");\n    console.log(body);\n    this.httpP.post(this.url + \"car\", body, {\n      'headers': headers\n    }).subscribe(r => {\n      this.router.navigate(['car']);\n    });\n  }\n\n  editCar(id, updatePerson) {\n    const headers = {\n      'content-type': 'application/json'\n    };\n    const body = JSON.stringify(updatePerson);\n    this.httpP.put(this.url + \"car/\" + id, body, {\n      'headers': headers\n    }).toPromise();\n    this.router.navigate(['car']);\n  }\n\n  deleteCar(id) {\n    this.httpP.delete(this.url + \"car/\" + id).toPromise();\n    this.router.navigate(['car']);\n  }\n\n  getPersonA() {\n    return this.httpP.get(this.url + \"person\").subscribe(res => {\n      this.personA = res;\n    });\n  } // ==> handleFileInput\n\n\n  handleFileInput(files) {\n    var _a;\n\n    if (files.length > 0) {\n      this.uploadFile = files.item(0);\n      this.uploadFileLabel = (_a = this.uploadFile) === null || _a === void 0 ? void 0 : _a.name;\n    }\n  }\n\n  upload() {\n    if (!this.uploadFile) {\n      alert('Choose a file to upload first');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(this.uploadFile.name, this.uploadFile);\n    const url = this.url + \"car/UplodFile\";\n    const uploadReq = new HttpRequest('POST', url, formData, {\n      reportProgress: true\n    });\n    this.uploadUrl = '';\n    this.uploadProgress = 0;\n    this.working = true;\n    this.httpP.request(uploadReq).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress) {\n        this.uploadProgress = Math.round(100 * event.loaded / event.total);\n      } else if (event.type === HttpEventType.Response) {\n        this.uploadUrl = event.body.url;\n      }\n    }, error => {\n      console.error(error);\n    }).add(() => {\n      this.working = false;\n    });\n  }\n\n}\n\nServicecarService.ɵfac = function ServicecarService_Factory(t) {\n  return new (t || ServicecarService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nServicecarService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServicecarService,\n  factory: ServicecarService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["H:/code/RECORDP/ANGULAR/Project CarWebApi/CarProject1/src/app/models/servicecar.service.ts"],"names":["HttpEventType","HttpRequest","i0","i1","i2","ServicecarService","constructor","httpP","router","url","working","uploadFileLabel","getAllCars","get","toPromise","then","res","carsall","console","log","getUrlImage","filename","replace","getCar","id","aaa","subscribe","addCar","newCar","headers","body","JSON","stringify","navigate","post","r","editCar","updatePerson","put","deleteCar","delete","getPersonA","personA","handleFileInput","files","_a","length","uploadFile","item","name","upload","alert","formData","FormData","append","uploadReq","reportProgress","uploadUrl","uploadProgress","request","event","type","UploadProgress","Math","round","loaded","total","Response","error","add","ɵfac","ServicecarService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpEventType, HttpRequest } from '@angular/common/http';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"@angular/router\";\r\nexport class ServicecarService {\r\n    constructor(httpP, router) {\r\n        this.httpP = httpP;\r\n        this.router = router;\r\n        this.url = \"https://localhost:44377/api/\";\r\n        this.working = false;\r\n        this.uploadFileLabel = 'Choose an image to upload';\r\n    }\r\n    getAllCars() {\r\n        this.httpP.get(\"https://localhost:44377/api/car\").toPromise().then(res => {\r\n            this.carsall = res;\r\n            console.log(\"---------- CAR -----------\");\r\n            console.log(res);\r\n        });\r\n    }\r\n    getUrlImage(filename) {\r\n        return this.url.replace(\"api/\", \"\") + \"images/\" + filename;\r\n    }\r\n    async getCar(id) {\r\n        var aaa;\r\n        await this.httpP.get(this.url + \"car/\" + id).subscribe(res => {\r\n            console.log(\" =================1\");\r\n            aaa = res;\r\n            console.log(\" =================1\");\r\n        });\r\n        await console.log(\" =================2\");\r\n        await console.log(aaa);\r\n        await console.log(\" =================2\");\r\n        return aaa;\r\n    }\r\n    addCar(newCar) {\r\n        const headers = { 'content-type': 'application/json' };\r\n        const body = JSON.stringify(newCar);\r\n        this.router.navigate(['car']);\r\n        console.log(\" ================== OK =============\");\r\n        console.log(body);\r\n        this.httpP.post(this.url + \"car\", body, { 'headers': headers }).subscribe(r => {\r\n            this.router.navigate(['car']);\r\n        });\r\n    }\r\n    editCar(id, updatePerson) {\r\n        const headers = { 'content-type': 'application/json' };\r\n        const body = JSON.stringify(updatePerson);\r\n        this.httpP.put(this.url + \"car/\" + id, body, { 'headers': headers }).toPromise();\r\n        this.router.navigate(['car']);\r\n    }\r\n    deleteCar(id) {\r\n        this.httpP.delete(this.url + \"car/\" + id).toPromise();\r\n        this.router.navigate(['car']);\r\n    }\r\n    getPersonA() {\r\n        return this.httpP.get(this.url + \"person\").subscribe(res => {\r\n            this.personA = res;\r\n        });\r\n    }\r\n    // ==> handleFileInput\r\n    handleFileInput(files) {\r\n        var _a;\r\n        if (files.length > 0) {\r\n            this.uploadFile = files.item(0);\r\n            this.uploadFileLabel = (_a = this.uploadFile) === null || _a === void 0 ? void 0 : _a.name;\r\n        }\r\n    }\r\n    upload() {\r\n        if (!this.uploadFile) {\r\n            alert('Choose a file to upload first');\r\n            return;\r\n        }\r\n        const formData = new FormData();\r\n        formData.append(this.uploadFile.name, this.uploadFile);\r\n        const url = this.url + \"car/UplodFile\";\r\n        const uploadReq = new HttpRequest('POST', url, formData, {\r\n            reportProgress: true,\r\n        });\r\n        this.uploadUrl = '';\r\n        this.uploadProgress = 0;\r\n        this.working = true;\r\n        this.httpP.request(uploadReq).subscribe((event) => {\r\n            if (event.type === HttpEventType.UploadProgress) {\r\n                this.uploadProgress = Math.round((100 * event.loaded) / event.total);\r\n            }\r\n            else if (event.type === HttpEventType.Response) {\r\n                this.uploadUrl = event.body.url;\r\n            }\r\n        }, (error) => {\r\n            console.error(error);\r\n        }).add(() => {\r\n            this.working = false;\r\n        });\r\n    }\r\n}\r\nServicecarService.ɵfac = function ServicecarService_Factory(t) { return new (t || ServicecarService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\r\nServicecarService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ServicecarService, factory: ServicecarService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}